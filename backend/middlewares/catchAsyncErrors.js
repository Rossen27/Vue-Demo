export default (controllerFunction) => (req, res, next) =>
  Promise.resolve(controllerFunction(req, res, next)).catch(next); 

/* 
這段代碼是一個用來處理異步錯誤的中間件函數。在不需要理解程式語言的情況下，可以這樣解釋它的意圖和邏輯：

1. 背景：在處理網頁請求時，經常需要處理一些可能會出錯的操作，特別是那些涉及等待回應的操作（例如，從資料庫取得資料或是發送網路請求）。這些操作通常是異步的（即，它們需要一些時間來完成，程式不會在等待它們的同時停止其他操作）。

2. 目標：這段代碼的目標是幫助開發者處理這些異步操作中的錯誤，讓程式能夠更穩定地運行。如果異步操作發生錯誤，這段代碼會自動捕捉到錯誤並交給下一個錯誤處理器來處理。

3. 邏輯：
  - 這段代碼是一個函數，它接收一個「控制器函數」（controllerFunction）作為參數。這個「控制器函數」通常包含了我們需要執行的主要操作。
  - 返回的函數會被用來處理網頁請求。它接收三個參數：請求（req）、回應（res）和下一步操作（next）。
  - 在這個函數裡，我們使用 `Promise.resolve` 來處理「控制器函數」。`Promise.resolve` 會確保不論「控制器函數」是否本身已經是個 Promise，最終都會以 Promise 的形式來處理。
  - 如果「控制器函數」在執行過程中出現了錯誤，這個錯誤會被 `catch` 捕捉到，然後傳遞給 `next` 函數。`next` 函數是 Express 框架中用來處理下一步中間件的，通常也用來處理錯誤。

4. 簡單比喻：可以想像這段代碼是一個安全網，當我們做一件需要時間完成的事情時（例如等待回應），如果發生了問題，這個安全網會抓住錯誤，並交給專門處理問題的人來處理，而不是讓整個系統崩潰。

總結來說，這段代碼的作用是確保在處理異步操作時，任何潛在的錯誤都能被適當地捕捉並處理，而不會中斷整個應用程式的運行。
*/